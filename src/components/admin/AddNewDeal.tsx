import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Plus,
  Upload,
  Star,
  Calendar,
  Tag,
  Store,
  DollarSign,
  Link,
  Image,
  Sparkles,
  Save,
  Eye,
  ExternalLink,
} from "lucide-react";
import { cn } from "@/lib/utils";

const AddNewDeal = () => {
  const [dealForm, setDealForm] = useState({
    title: "",
    description: "",
    originalPrice: "",
    salePrice: "",
    productUrl: "",
    imageUrl: "",
    store: "",
    category: "",
    subcategory: "",
    tags: "",
    expirationDate: "",
    featured: false,
    autoGenerateDescription: false,
  });

  const [isGeneratingDescription, setIsGeneratingDescription] = useState(false);
  const [previewMode, setPreviewMode] = useState(false);

  const stores = [
    { id: "amazon", name: "Amazon", logo: "🛒" },
    { id: "walmart", name: "Walmart", logo: "🏪" },
    { id: "bestbuy", name: "Best Buy", logo: "🔵" },
    { id: "target", name: "Target", logo: "🎯" },
    { id: "apple", name: "Apple Store", logo: "🍎" },
    { id: "sony", name: "Sony Store", logo: "📺" },
    { id: "nike", name: "Nike", logo: "👟" },
    { id: "adidas", name: "Adidas", logo: "👕" },
  ];

  const categories = [
    {
      name: "Electronics",
      subcategories: [
        "Smartphones",
        "Laptops",
        "Headphones",
        "Tablets",
        "Smart Home",
        "Gaming",
        "Cameras",
        "Wearables",
      ],
    },
    {
      name: "Fashion",
      subcategories: [
        "Men's Clothing",
        "Women's Clothing",
        "Shoes",
        "Accessories",
        "Jewelry",
        "Bags",
        "Watches",
        "Sportswear",
      ],
    },
    {
      name: "Home & Kitchen",
      subcategories: [
        "Furniture",
        "Kitchen Appliances",
        "Home Decor",
        "Bedding",
        "Storage",
        "Cookware",
        "Garden",
        "Tools",
      ],
    },
    {
      name: "Health & Beauty",
      subcategories: [
        "Skincare",
        "Makeup",
        "Hair Care",
        "Supplements",
        "Fitness",
        "Personal Care",
        "Fragrances",
        "Medical",
      ],
    },
  ];

  const handleGenerateDescription = async () => {
    if (!dealForm.title || !dealForm.store) {
      alert("Please fill in the product title and store first");
      return;
    }

    setIsGeneratingDescription(true);
    // Simulate AI description generation
    setTimeout(() => {
      const generatedDescription = `Experience the premium quality of ${dealForm.title} at an unbeatable price! This exclusive offer from ${dealForm.store} brings you cutting-edge technology and superior craftsmanship. Don't miss out on this limited-time deal that combines innovation with incredible value. Perfect for tech enthusiasts and anyone looking for high-performance products. Order now and enjoy fast shipping, excellent customer service, and the peace of mind that comes with purchasing from a trusted retailer.`;

      setDealForm((prev) => ({
        ...prev,
        description: generatedDescription,
      }));
      setIsGeneratingDescription(false);
    }, 2000);
  };

  const handleSubmit = () => {
    // Validate form
    const requiredFields = [
      "title",
      "originalPrice",
      "salePrice",
      "productUrl",
      "store",
      "category",
    ];
    const missingFields = requiredFields.filter((field) => !dealForm[field]);

    if (missingFields.length > 0) {
      alert(
        `Please fill in the following required fields: ${missingFields.join(", ")}`,
      );
      return;
    }

    console.log("Submitting deal:", dealForm);
    alert("Deal submitted successfully!");
  };

  const calculateDiscount = () => {
    if (dealForm.originalPrice && dealForm.salePrice) {
      const original = parseFloat(dealForm.originalPrice);
      const sale = parseFloat(dealForm.salePrice);
      if (original > sale && original > 0) {
        return Math.round(((original - sale) / original) * 100);
      }
    }
    return 0;
  };

  const getCurrentCategory = () => {
    return categories.find((cat) => cat.name === dealForm.category);
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
        <div>
          <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">
            Add New Deal
          </h1>
          <p className="text-gray-600 mt-1">
            Create a new deal with all product details and settings
          </p>
        </div>
        <div className="flex items-center gap-3">
          <Button
            variant="outline"
            onClick={() => setPreviewMode(!previewMode)}
          >
            <Eye className="h-4 w-4 mr-2" />
            {previewMode ? "Edit Mode" : "Preview"}
          </Button>
          <Button
            onClick={handleSubmit}
            className="bg-green-600 hover:bg-green-700"
          >
            <Save className="h-4 w-4 mr-2" />
            Save Deal
          </Button>
        </div>
      </div>

      {previewMode ? (
        // Preview Mode
        <Card>
          <CardHeader>
            <CardTitle>Deal Preview</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              {/* Preview Header */}
              <div className="flex items-start gap-4">
                <div className="w-32 h-32 bg-gray-200 rounded-lg flex items-center justify-center">
                  {dealForm.imageUrl ? (
                    <img
                      src={dealForm.imageUrl}
                      alt="Product"
                      className="w-full h-full object-cover rounded-lg"
                    />
                  ) : (
                    <Image className="h-12 w-12 text-gray-400" />
                  )}
                </div>
                <div className="flex-1">
                  <h3 className="text-xl font-bold text-gray-900">
                    {dealForm.title || "Product Title"}
                  </h3>
                  <div className="flex items-center gap-2 mt-2">
                    <Badge variant="outline">{dealForm.store || "Store"}</Badge>
                    {dealForm.featured && (
                      <Star className="h-4 w-4 text-yellow-500 fill-current" />
                    )}
                  </div>
                  <div className="flex items-center gap-3 mt-3">
                    <span className="text-2xl font-bold text-green-600">
                      ${dealForm.salePrice || "0"}
                    </span>
                    {dealForm.originalPrice && (
                      <>
                        <span className="text-lg text-gray-500 line-through">
                          ${dealForm.originalPrice}
                        </span>
                        {calculateDiscount() > 0 && (
                          <Badge className="bg-red-100 text-red-700">
                            -{calculateDiscount()}%
                          </Badge>
                        )}
                      </>
                    )}
                  </div>
                </div>
              </div>

              {/* Preview Description */}
              {dealForm.description && (
                <div>
                  <h4 className="font-semibold mb-2">Description</h4>
                  <p className="text-gray-700">{dealForm.description}</p>
                </div>
              )}

              {/* Preview Details */}
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
                <div>
                  <span className="text-gray-500">Category:</span>
                  <p className="font-medium">
                    {dealForm.category || "Not specified"}
                  </p>
                </div>
                <div>
                  <span className="text-gray-500">Subcategory:</span>
                  <p className="font-medium">
                    {dealForm.subcategory || "Not specified"}
                  </p>
                </div>
                <div>
                  <span className="text-gray-500">Expires:</span>
                  <p className="font-medium">
                    {dealForm.expirationDate || "No expiry"}
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      ) : (
        // Edit Mode
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Form */}
          <div className="lg:col-span-2 space-y-6">
            {/* Basic Information */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Plus className="h-5 w-5" />
                  Basic Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">
                    Product Title *
                  </label>
                  <Input
                    placeholder="Enter product title"
                    value={dealForm.title}
                    onChange={(e) =>
                      setDealForm((prev) => ({
                        ...prev,
                        title: e.target.value,
                      }))
                    }
                  />
                </div>

                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <label className="text-sm font-medium text-gray-700">
                      Product Description
                    </label>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleGenerateDescription}
                      disabled={isGeneratingDescription}
                    >
                      <Sparkles className="h-4 w-4 mr-2" />
                      {isGeneratingDescription
                        ? "Generating..."
                        : "AI Generate"}
                    </Button>
                  </div>
                  <Textarea
                    placeholder="Enter product description or use AI to generate one"
                    rows={4}
                    value={dealForm.description}
                    onChange={(e) =>
                      setDealForm((prev) => ({
                        ...prev,
                        description: e.target.value,
                      }))
                    }
                  />
                </div>

                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">
                      Original Price *
                    </label>
                    <div className="relative">
                      <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                      <Input
                        type="number"
                        placeholder="0.00"
                        className="pl-10"
                        value={dealForm.originalPrice}
                        onChange={(e) =>
                          setDealForm((prev) => ({
                            ...prev,
                            originalPrice: e.target.value,
                          }))
                        }
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">
                      Sale Price *
                    </label>
                    <div className="relative">
                      <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                      <Input
                        type="number"
                        placeholder="0.00"
                        className="pl-10"
                        value={dealForm.salePrice}
                        onChange={(e) =>
                          setDealForm((prev) => ({
                            ...prev,
                            salePrice: e.target.value,
                          }))
                        }
                      />
                    </div>
                  </div>
                </div>

                {calculateDiscount() > 0 && (
                  <div className="p-3 bg-green-50 rounded-lg">
                    <p className="text-sm text-green-700">
                      <strong>Discount: {calculateDiscount()}%</strong> -
                      Savings of $
                      {(
                        parseFloat(dealForm.originalPrice) -
                        parseFloat(dealForm.salePrice)
                      ).toFixed(2)}
                    </p>
                  </div>
                )}

                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">
                    Product URL *
                  </label>
                  <div className="relative">
                    <Link className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <Input
                      placeholder="https://..."
                      className="pl-10"
                      value={dealForm.productUrl}
                      onChange={(e) =>
                        setDealForm((prev) => ({
                          ...prev,
                          productUrl: e.target.value,
                        }))
                      }
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">
                    Product Image URL
                  </label>
                  <div className="relative">
                    <Image className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <Input
                      placeholder="https://..."
                      className="pl-10"
                      value={dealForm.imageUrl}
                      onChange={(e) =>
                        setDealForm((prev) => ({
                          ...prev,
                          imageUrl: e.target.value,
                        }))
                      }
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Store & Category */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Store className="h-5 w-5" />
                  Store & Category
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">
                    Store *
                  </label>
                  <Select
                    value={dealForm.store}
                    onValueChange={(value) =>
                      setDealForm((prev) => ({ ...prev, store: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select store" />
                    </SelectTrigger>
                    <SelectContent>
                      {stores.map((store) => (
                        <SelectItem key={store.id} value={store.name}>
                          <div className="flex items-center gap-2">
                            <span>{store.logo}</span>
                            <span>{store.name}</span>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">
                      Category *
                    </label>
                    <Select
                      value={dealForm.category}
                      onValueChange={(value) =>
                        setDealForm((prev) => ({
                          ...prev,
                          category: value,
                          subcategory: "",
                        }))
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent>
                        {categories.map((category) => (
                          <SelectItem key={category.name} value={category.name}>
                            {category.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">
                      Subcategory
                    </label>
                    <Select
                      value={dealForm.subcategory}
                      onValueChange={(value) =>
                        setDealForm((prev) => ({ ...prev, subcategory: value }))
                      }
                      disabled={!dealForm.category}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select subcategory" />
                      </SelectTrigger>
                      <SelectContent>
                        {getCurrentCategory()?.subcategories.map(
                          (subcategory) => (
                            <SelectItem key={subcategory} value={subcategory}>
                              {subcategory}
                            </SelectItem>
                          ),
                        )}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">
                    Tags (comma separated)
                  </label>
                  <div className="relative">
                    <Tag className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <Input
                      placeholder="e.g., smartphone, apple, premium, wireless"
                      className="pl-10"
                      value={dealForm.tags}
                      onChange={(e) =>
                        setDealForm((prev) => ({
                          ...prev,
                          tags: e.target.value,
                        }))
                      }
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Sidebar Settings */}
          <div className="space-y-6">
            {/* Deal Settings */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Star className="h-5 w-5" />
                  Deal Settings
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium text-gray-700">
                    Expiration Date
                  </label>
                  <div className="relative">
                    <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <Input
                      type="date"
                      className="pl-10"
                      value={dealForm.expirationDate}
                      onChange={(e) =>
                        setDealForm((prev) => ({
                          ...prev,
                          expirationDate: e.target.value,
                        }))
                      }
                    />
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium text-gray-900">Featured Deal</h4>
                    <p className="text-sm text-gray-500">
                      Show in featured section
                    </p>
                  </div>
                  <Button
                    variant={dealForm.featured ? "default" : "outline"}
                    size="sm"
                    onClick={() =>
                      setDealForm((prev) => ({
                        ...prev,
                        featured: !prev.featured,
                      }))
                    }
                  >
                    {dealForm.featured ? (
                      <Star className="h-4 w-4 fill-current" />
                    ) : (
                      <Star className="h-4 w-4" />
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Quick Actions */}
            <Card>
              <CardHeader>
                <CardTitle>Quick Actions</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button variant="outline" className="w-full justify-start">
                  <Upload className="h-4 w-4 mr-2" />
                  Upload Image
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <ExternalLink className="h-4 w-4 mr-2" />
                  Verify Product URL
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <Eye className="h-4 w-4 mr-2" />
                  Preview Deal
                </Button>
              </CardContent>
            </Card>

            {/* Form Progress */}
            <Card>
              <CardHeader>
                <CardTitle>Form Progress</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Completion</span>
                    <span>
                      {Math.round(
                        (Object.values(dealForm).filter((value) =>
                          typeof value === "string"
                            ? value.trim() !== ""
                            : value !== false,
                        ).length /
                          Object.keys(dealForm).length) *
                          100,
                      )}
                      %
                    </span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                      style={{
                        width: `${Math.round(
                          (Object.values(dealForm).filter((value) =>
                            typeof value === "string"
                              ? value.trim() !== ""
                              : value !== false,
                          ).length /
                            Object.keys(dealForm).length) *
                            100,
                        )}%`,
                      }}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      )}
    </div>
  );
};

export default AddNewDeal;
